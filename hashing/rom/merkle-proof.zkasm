start:
    ; Height of the Merkle tree
    ${ getMerkleTreeHeight() } => C     
    ; Specifying length value: 256-bit registers
    32 => D                             :JMP(getLeaf)

getLeaf:
    ; Gets the leaf we are computing the Merkle root for
    ${ getLeafValue() } => A            :JMP(merkleProof)

merkleProof:
    ; Set the current hash position to 0 to start a new hash
    0 => HASHPOS
    32 => D
    ; Load the next index of our Merkle proof
    ${ getPathIndex() } => B            :JMPZ(rightNode, leftNode)

    ; The Merkle proof is on the left
    rightNode:
        A                               :HASHP(E)
        ${ getPathValue() } => B        :HASHP(E), JMP(levelHash)

    ; The Merkle proof is on the right
    leftNode:
        ${ getPathValue() } => B        :HASHP(E)
        A                               :HASHP(E), JMP(levelHash)

    levelHash:
        ; Compute the hash of these two values
        HASHPOS                         :HASHPLEN(E)
        ; Get the digest and store it on the A register, the next level of our Merkle proof
        $ => A                          :HASHPDIGEST(E)

        ; Continue iterating until we reach the root
        C - 1 => C                      :JMPZ(endMerkleProof, merkleProof)

endMerkleProof:
    ; Verify that the computed root matches the given root of the Merkle tree
    ${ getMerkleTreeRoot() } => C       :ASSERT, JMP(finalizeExecution)

; Finalize execution by jumping to the final wait
finalizeExecution:
    ${ beforeLast() }                   :JMPN(finalizeExecution)
    ; Set all registers to 0
    0 => A, B, C, D, E, HASHPOS         :JMP(start)
