INCLUDE "config.zkasm"

start:
    ; Root of the Merkle tree
    ${ getMerkleTreeRoot() } => C
    ; Height of the Merkle tree
    ${ getMerkleTreeHeight() } => D     :JMP(getLeaf)

getLeaf:
    ; Gets the leaf we are computing the Merkle root for
    ${ getLeafValue() } => A            :JMP(getLeaf)

merkleProof:
    ; Set the current hash position to 0 to start a new hash
    0 => HASHPOS
    ; Load the next index of our Merkle proof
    ${ getBranchIndex() } => B          :JMPZ(hashRight, hashLeft)

    ; The branch is on the right, we hash with the left value
    hashLeft:
        ${ getBranchValue() } => B      :HASHP(E)
        A                               :HASHP(E)

    ; The branch is on the left, we hash with the right value
    hashRight:
        A                               :HASHP(E)
        ${ getBranchValue() } => B      :HASHP(E)

    ; Compute the hash of these two values
    HASHPOS                             :HASHPLEN(E)
    ; Get the digest and store it on the A register, the next level the our Merkle proof
    $ => A                              :HASHPDIGEST(E)

    ; Continue iterating until we reach the root
    D - 1 => D                          :JMPZ(endMerkleProof, merkleProof)

endMerkleProof:
    ; Verify that the computed root matches the root of the Merkle tree, stored on A
    C                                   :ASSERT, JMP(finalizeExecution)

; Finalize execution by jumping to the final wait
finalizeExecution:
    ${ beforeLast() }                   :JMPN(finalizeExecution)
    ; Set all registers to 0
    0 => A, B, C, D, E, HASHPOS         :JMP(start)
