INCLUDE "constEc.zkasm"

INCLUDE "addFpEc.zkasm"
INCLUDE "checkSqrtFpEc.zkasm"
INCLUDE "invFnEc.zkasm"
INCLUDE "invFpEc.zkasm"
INCLUDE "mulFnEc.zkasm"
INCLUDE "mulFpEc.zkasm"
INCLUDE "mulPointEc.zkasm"
INCLUDE "sqFpEc.zkasm"
INCLUDE "sqrtFpEc.zkasm"

/** @info Verifies an ECDSA signature, retrieving the signer's public address in the process
* @in: A: Hash of the message being signed
* @in: B: `r` value for the ECDSA signature
* @in: C: `s` value for the ECDSA signature
* @in: D: `v``value for the ECDSA signature
* @out: A: public address of the signer
* @out: B: result code of the process, which can be: 
*       0 - no error
*       1 - `r` is zero (0)
*       2 - `r` is too big
*       3 - `s` is zero (0)
*       4 - `s` is too big
*       5 - `v` not valid value (1b, 1c)
*       6 - square root of `y` does not exist
*       100 - square root exists, but the process failed (!!!)
*/

VAR GLOBAL ecrecover_hash
VAR GLOBAL ecrecover_r
VAR GLOBAL ecrecover_s
VAR GLOBAL ecrecover_v
VAR GLOBAL ecrecover_r_inv
VAR GLOBAL ecrecover_y
VAR GLOBAL ecrecover_y2
VAR GLOBAL ecrecover_k1
VAR GLOBAL ecrecover_k2
VAR GLOBAL ecrecover_RR
VAR GLOBAL ecrecover_v_parity
VAR GLOBAL ecrecover_s_upperlimit

ecrecover_precompiled:
    %FNEC_MINUS_ONE                     :MSTORE(ecrecover_s_upperlimit), JMP(ecrecover_store_args)

ecrecover_tx:
    %FNEC_DIV_TWO                       :MSTORE(ecrecover_s_upperlimit)

ecrecover_store_args:
    ; Save arguments
    A                                   :MSTORE(ecrecover_hash)
    B                                   :MSTORE(ecrecover_r)
    C                                   :MSTORE(ecrecover_s)
    D                                   :MSTORE(ecrecover_v)

    ; Check counters
    %MAX_CNT_BINARY - CNT_BINARY - 1600 :JMPN(outOfCountersBinary)
    %MAX_CNT_ARITH - CNT_ARITH - 1100   :JMPN(outOfCountersArith)
    %MAX_CNT_STEPS - STEP - 6400        :JMPN(outOfCountersStep)

    $ => A                              :MLOAD(cntKeccakPreProcess)
    %MAX_CNT_KECCAK_F - CNT_KECCAK_F - A - 1 :JMPN(outOfCountersKeccak)

    ; Save RR to call return at end of routine
    RR                                  :MSTORE(ecrecover_RR)

    ; Verify that `r``is in the range [1, FNEC-1]
    $ => B                              :MLOAD(ecrecover_r)
    0n => A
    $                                   :EQ, JMPC(ecrecover_r_is_zero)
    %FNEC_MINUS_ONE => A

    $                                   :LT, JMPC(ecrecover_r_is_too_big)

    ; Verify that `s` is in the range [1, ecrecover_s_upperlimit]
    $ => A                              :MLOAD(ecrecover_s_upperlimit)
    $ => B                              :MLOAD(ecrecover_s)
    $                                   :LT, JMPC(ecrecover_s_is_too_big)
    0n => A
    $                                   :EQ, JMPC(ecrecover_s_is_zero)

    ; Compute the inverse of `r`
    $ => A                              :MLOAD(ecrecover_r), CALL(invFnEc)
    B                                   :MSTORE(ecrecover_r_inv)

    0x1Bn => B
    $ => A                              :MLOAD(ecrecover_v)
    $ => E                              :EQ, JMPC(ecrecover_v_eq_1b, ecrecover_v_not_eq_1b)

    ecrecover_v_eq_1b:
        0n                              :MSTORE(ecrecover_v_parity), JMP(ecrecover_v_ok)

    ecrecover_v_not_eq_1b:
        0x1Cn => B
        $ => E                          :EQ,JMPNC(ecrecover_v_not_eq_1b1c)

        1n                              :MSTORE(ecrecover_v_parity), JMP(ecrecover_v_ok)

ecrecover_v_ok:
    ;
    ; y^2 = x^3 + 7
    ;
    ; A*B*A + 7 = calculate y from x
    $ => A,B                            :MLOAD(ecrecover_r),CALL(mulFpEc)

    C => A
    $ => B                              :MLOAD(ecrecover_r),CALL(mulFpEc)

    7 => A                              :CALL(addFpEc)


    C                                   :MSTORE(ecrecover_y2),CALL(sqrtFpEc)

    ;; If has root y ** (p-1)/2 = 1, if -1 => no root, not valid signature

    %FPEC_NON_SQRT => A
    C => B
    $ => E                              :EQ,JMPNC(ecrecover_has_sqrt)

    ; hasn't sqrt, now verify

    $ => C                              :MLOAD(ecrecover_y2),CALL(checkSqrtFpEc)
    ; check must return on A register 1, because the root has no solution
    1                                   :ASSERT,JMP(ecrecover_not_exists_sqrt_of_y)

ecrecover_has_sqrt:
    ; (v == 1b) ecrecover_y_parity = 0x00
    ; (v == 1c) ecrecover_y_parity = 0x01

    ; C,B: y = sqrt(y^2)
    ; check B isn't an alias (B must be in [0, FPEC-1])

    %FPEC_MINUS_ONE => A
    0                                   :LT  ; Assert to validate that B (y) isn't n alias.

    ; C,B: y = sqrtFpEc(y^2)

    0x01n => A
    $ => A                              :AND
    $ => B                              :MLOAD(ecrecover_v_parity)

    ; ecrevover_y xor ecrecover_y_parity => 0 same parity, 1 different parity
    ; ecrecover_y2  v parity
    ; parity (A)       (B)      A+B-1
    ;      0            0        -1     same parity
    ;      0            1         0     different parity
    ;      1            0         0     different parity
    ;      1            1         1     same parity

    A + B - 1                           :JMPNZ(ecrecover_v_y2_same_parity)

    ; calculate neg(ecrecover_y) C = (A:FPEC) - (B:ecrecovery_y)

    %FPEC => A
    C => B
    $ => C                              :SUB

ecrecover_v_y2_same_parity:

    C                                   :MSTORE(ecrecover_y)

    ;   C = (hash * inv_r) % n

    $ => A                              :MLOAD(ecrecover_hash)
    $ => B                              :MLOAD(ecrecover_r_inv),CALL(mulFnEc)

    ; C = n - (hash * inv_r) % n

    ${const.FNEC - C}  => A :MSTORE(mulPointEc_k1)
    1 => B
    0 => D
    %FNEC                               :ARITH

    $ => A                              :MLOAD(ecrecover_s)
    $ => B                              :MLOAD(ecrecover_r_inv),CALL(mulFnEc)

    ;   C = (s * inv_r) % n
    C                                   :MSTORE(mulPointEc_k2)

    %ECGX                               :MSTORE(mulPointEc_p1_x)
    %ECGY                               :MSTORE(mulPointEc_p1_y)

    ; r isn't an alias because the range has been checked at beginning
    $ => A                              :MLOAD(ecrecover_r)
    A                                   :MSTORE(mulPointEc_p2_x)

    ; y isn't an alias because was checked before
    ; (r,y) is a point of curve because it satisfacts the curve equation
    $ => A                              :MLOAD(ecrecover_y)
    A                                   :MSTORE(mulPointEc_p2_y),CALL(mulPointEc)


    ; generate keccak of public key to obtain ethereum address
    $ => E                                 :MLOAD(lastHashKIdUsed)
    E + 1 => E                             :MSTORE(lastHashKIdUsed)
    0 => HASHPOS
    32 => D

    %FPEC => B
    $ => A                                 :MLOAD(mulPointEc_p3_x)
    1                                      :LT  ; alias assert, mulPointEc_p3_x must be in [0, FPEC - 1]

    A                                      :HASHK(E)

    $ => A                                 :MLOAD(mulPointEc_p3_y)
    1                                      :LT  ; alias assert, mulPointEc_p3_y must be in [0, FPEC - 1]

    A                                      :HASHK(E)

    64                                     :HASHKLEN(E)
    $ => A                                 :HASHKDIGEST(E)

    ; for address take only last 20 bytes
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B
    $ => A                                 :AND
    0 => B                                 :JMP(ecrecover_end)

; ERRORS
ecrecover_r_is_zero:
    1 => B                                  :JMP(ecrecover_error)

ecrecover_r_is_too_big:
    2 => B                                  :JMP(ecrecover_error)

ecrecover_s_is_zero:
    3 => B                                  :JMP(ecrecover_error)

ecrecover_s_is_too_big:
    4 => B                                  :JMP(ecrecover_error)

ecrecover_v_not_eq_1b1c:
    5 => B                                  :JMP(ecrecover_error)

ecrecover_not_exists_sqrt_of_y:
    6 => B                                  :JMP(ecrecover_error)

ecrecover_error:
    0 => A

ecrecover_end:
    $ => RR                                 :MLOAD(ecrecover_RR)
                                            :RETURN

