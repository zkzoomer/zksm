INCLUDE "load-tx-rlp-utils.zkasm"

/** Blocks RLP parsing
*       A - Initialization
*       B - Read and check RLP fields. Fill 'batchHashData' and Ethereum signed transaction bytes
*       C - Read signature. Fill 'batchHashData' bytes
*       D - Finish RLP parsing
*       E - Handler error RLP fields
*/

loadTx_rlp:
    /**
    * A - Initialization
    *     - Data to parse: [RLP(nonce, reqType, data, chainId) | r | s | v ]
    *     - Signed Ethereum transaction: H_keccak(RLP(nonce, reqType, data, chainId))
    *     - RLP encoding information: https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp
    *     - Entire batch is discarded (no signature is verified) if any error is found
    */

    ; Check one keccak is available to begin processing the RLP
    $ => D                                          :MLOAD(cntKeccakPreProcess)
    %MAX_CNT_KECCAK_F - CNT_KECCAK_F - 1 - D        :JMPN(outOfCountersKeccak)

    ; A new hash with position 0 is started
    0 => HASHPOS

    ; Get a new Keccak hashId
    $ => E                          	:MLOAD(lastHashKIdUsed)
    E + 1 => E                      	:MSTORE(lastHashKIdUsed)
    ; Pointer to next RLP bytes to read
    0 => C

    /**
    * B - Read and check RLP fields. Fill `batchHashData` and signed transaction bytes
    */

    ; Read RLP list length
    ; Should be a list
    1 => D                          	:CALL(addHashTxBegin)
                                   		:CALL(addBatchHashData)
    A - 0xc0                     	   	:JMPN(invalidTxRLP)
    A - 0xf8                   		    :JMPN(shortList)
    ; do not allow lists over 2**24 bytes length
    ; Transaction could not have more than 300.000 due to smart contract limitation (keccaks counters)
    ; meaning that the RLP encoding is wrong
    A - 0xfb                        :JMPN(longList, invalidTxRLP)

	longList:
		A - 0xf7 => D               	:CALL(addHashTxBegin)
                                    	:CALL(addBatchHashData)
                                    	:CALL(checkLongRLP)
                                    	:CALL(checkNonLeadingZeros)
                                    	:JMP(endList)
	shortList:
		A - 0xc0 => A

	endList:
		A + C => B						:MSTORE(txRLPLength)
		; Check enough zk counters to digest tx hash
		B + 1                       	:MSTORE(arithA)
		136                         	:MSTORE(arithB), CALL(divARITH); in: [arithA, arithB] out: [arithRes1: arithA/arithB, arithRes2: arithA%arithB]
		$ => B                      	:MLOAD(arithRes1)
		$ => D                      	:MLOAD(cntKeccakPreProcess)
		%MAX_CNT_KECCAK_F - CNT_KECCAK_F - B - D - 1 :JMPN(outOfCountersKeccak)

	;; Read RLP 'nonce'
	; 64 bits max
	nonceREAD:
		1 => D                      	:CALL(addHashTx)
										:CALL(addBatchHashData)
		A - 0x80                    	:JMPN(endNonce)
		A - 0x81                    	:JMPN(nonce0)
		A - 0x89                    	:JMPN(shortNonce, invalidTxRLP)

	nonce0:
		0 => A                      	:MSTORE(lengthNonce), JMP(endNonce)

	shortNonce:
		A - 0x80 => D
		D                           	:MSTORE(lengthNonce), CALL(addHashTx)
										:CALL(addBatchHashData)
										:CALL(checkShortRLP)
										:CALL(checkNonLeadingZeros)

	endNonce:
		A                           	:MSTORE(txNonce)

	;; Read RLP `reqType`
	; 64 bits max
	reqTypeREAD:
		1 => D 							:CALL(addHashTx)
										:CALL(addBatchHashData)
		A - 0x80						:JMPN(endReqType)
		A - 0x81 						:JMPN(reqType0)
		A - 0x89						:JMPN(shortReqType, invalidTxRLP)

	reqType0:
		0 => A							:JMPN(endReqType)

	shortReqType:
		A - 0x80 => D 					:CALL(addHashTx)
										:CALL(addBatchHashData)
										:CALL(checkShortRLP)
										:CALL(checkNonLeadingZeros)

	endReqType:

	;; Read RLP 'data'
	; should not be a list
	dataREAD:
		; Set calldata offset and CTX
		$ => D                          :MLOAD(globalCalldataMemoryOffset)
		D * 32                          :MSTORE(calldataOffset)
		$ => D                          :MLOAD(batchHashPos)
		D                               :MSTORE(dataStarts)
		1 => D                          :CALL(addHashTx)
										:CALL(addBatchHashData)
		A - 0x80                        :JMPN(veryShortData)
		A - 0x81                        :JMPN(endData)
		A - 0xb8                        :JMPN(shortData)
		; do not allow string over 2**24 bytes length
		; Transaction could not have more than 300.000 due to smart contract limitation (keccaks counters)
		; meaning that the RLP encoding is wrong
		A - 0xbb                        :JMPN(longData, invalidTxRLP)

	veryShortData:
		1                               :MSTORE(txCalldataLen)
		31 => D                         :CALL(SHLarith) ; in: [A: value, D: #bytes to left shift] out: [A: shifted result]
		; Store current CTX
		CTX => B
		; Store calldata to calldata CTX's memory
		%CALLDATA_RESERVED_CTX => CTX
		$ => E                          :MLOAD(globalCalldataMemoryOffset)
		A                               :MSTORE(MEM:E)
		E + 1                           :MSTORE(globalCalldataMemoryOffset)
		$ => E                          :MLOAD(lastHashKIdUsed)
		; Restore current CTX
		B => CTX                        :JMP(endData)

	shortData:
		$ => D                          :MLOAD(batchHashPos)
		D                               :MSTORE(dataStarts)
		A - 0x80 => B                   :MSTORE(txCalldataLen), JMP(readData)

	longData:
		A - 0xb7 => D                   :CALL(addHashTx)
										:CALL(addBatchHashData)
										:CALL(checkLongRLP)
										:CALL(checkNonLeadingZeros)
		$ => D                          :MLOAD(batchHashPos)
		D                               :MSTORE(dataStarts)
		A => B                          :MSTORE(txCalldataLen)

	readData:
		32 => D
		B - D                           :JMPN(readDataFinal)
		B - D                           :MSTORE(txDataRead), CALL(addHashTx)
		$ => E                          :MLOAD(globalCalldataMemoryOffset)
		; Store current CTX
		CTX => B
		; Store calldata to calldata CTX's memory
		%CALLDATA_RESERVED_CTX => CTX
		A                               :MSTORE(MEM:E)
		; Restore current CTX
		B => CTX
		E + 1                           :MSTORE(globalCalldataMemoryOffset), CALL(addBatchHashByteByByte) ; in: [A: bytes to add, D: bytes length] out: [E: lastHashKIdUsed, A: shifted bytes to add]
		$ => B                          :MLOAD(txDataRead), JMP(readData)

	readDataFinal:
		B - 1                           :JMPN(endData)
		B => D                          :CALL(addHashTx)
		32 - D => D                     :CALL(SHLarith); in: [A: value, D: #bytes to left shift] out: [A: shifted result]
		$ => E                          :MLOAD(globalCalldataMemoryOffset)
		; Store current CTX
		CTX => B
		; Store calldata to calldata CTX's memory
		%CALLDATA_RESERVED_CTX => CTX
		A                               :MSTORE(MEM:E)
		; Restore current CTX
		B => CTX
		E + 1                           :MSTORE(globalCalldataMemoryOffset)
		32 - D => D                     :CALL(addBatchHashByteByByte); in: [A: bytes to add, D: bytes length] out: [E: lastHashKIdUsed, A: shifted bytes to add]
										:CALL(checkShortDataRLP)

	endData:

	;; Read RLP 'chainId'
	; 64 bits max
	chainREAD:
		1 => D                          :CALL(addHashTx)
										:CALL(addBatchHashData)
		A - 0x80                        :JMPN(endChainId)
		A - 0x81                        :JMPN(chainId0)
		A - 0x89                        :JMPN(shortChainId, invalidTxRLP)

	chainId0:
		0 => A                          :JMP(endChainId)


	shortChainId:
		A - 0x80 => D                   :CALL(addHashTx)
										:CALL(addBatchHashData)
										:CALL(checkShortRLP)
										:CALL(checkNonLeadingZeros)

	endChainId:
		A                               :MSTORE(txChainId)

	;; Size verification
	; Checks RLP length read at the RLP header with bytes read during RLP parsing
	sizeVerification:
		C => A
		$ => B                          :MLOAD(txRLPLength)
		$                               :EQ, JMPC(sizeVerificationSuccess, invalidTxRLP)
	sizeVerificationSuccess:
		HASHPOS                         :HASHKLEN(E)

	/**
	* C - Read signature. Fill `batchHashData` bytes
	*/

	;; Read ECDSA `r`
	rREADTx:
		32 => D                         :CALL(getTxBytes)
		A                               :MSTORE(txR)
		C + D => C                      :CALL(addBatchHashData)

	;; Read ECDSA `s`
	sREADTx:
		32 => D                         :CALL(getTxBytes)
		A                               :MSTORE(txS)
		C + D => C                      :CALL(addBatchHashData)

	;; Read ECDSA `v`
	vREADTx:
		1 => D                          :CALL(getTxBytes)
		A                               :MSTORE(txV)
		C + D => C                      :CALL(addBatchHashData)

	;; Read effective percentage
	effectivePercentageTx:
		1 => D                          :CALL(getTxBytes)
		A                               :MSTORE(effectivePercentageRLP)
		C + D => C                      :CALL(addBatchHashData)

	/**
	* D - Finish RLP parsing
	*/
	;; Update bytes parsed
	$ => A                          :MLOAD(batchL2DataParsed)
	A + C                           :MSTORE(batchL2DataParsed)
	;; Increase number of transaction to process
	$ => A                          :MLOAD(pendingTxs)
	A + 1                           :MSTORE(pendingTxs)
	;; Compute signature
	$ => A                          :HASHKDIGEST(E)
	A                               :MSTORE(txHash), JMP(txLoopRLP)

	/**
	* E - Handler error RLP fields
	*/
	invalidTxRLP:
		$${eventLog(onError,invalidRLP)} :JMP(appendTxsInit)

	; Append all missing `batchL2Data` to `batchDataHash` bytes
	appendTxsInit:
		$ => B                          :MLOAD(batchL2DataLength)
		$ => C                          :MLOAD(batchHashPos)
		$${p = C}
		$ => HASHPOS                    :MLOAD(batchHashPos)
		$ => E                          :MLOAD(batchHashDataId)

	appendTxs:
		B - C - 32                      :JMPN(finalAppendTxs)
		32 => D
		${getTxs(p,D)} => A
		$${p = p + D}
		A                               :HASHK(E)
		C + D => C                      :JMP(appendTxs)

	finalAppendTxs:
		B - C => D
		D - 1                           :JMPN(endAppendTxs)
		${getTxs(p,D)} => A
		$${p = p + D}
		A                               :HASHK(E)
		C + D => C

	endAppendTxs:
		HASHPOS                         :MSTORE(batchHashPos), JMP(processTxsEnd)  ; End the signature verification loop
