;@info: Add 'data' bytes to `batchHashData`, which is the Keccak hash of the `transactions`
;@in: D: Number of bytes we want to append, up to 32
addBatchHashData:
    $ => HASHPOS                    :MLOAD(batchHashPos)  ; Total input bytes that have been introduced to the hash input 
    $ => E                          :MLOAD(batchHashDataId)
    A                               :HASHK(E)
    HASHPOS                         :MSTORE(batchHashPos)
    C => HASHPOS
    $ => E                          :MLOAD(lastHashKIdUsed), RETURN

;@info Get D bytes from transaction bytes
getTxBytes:
    ; Revert if all data has already been parsed
    $ => A                          :MLOAD(batchL2DataLength)
    $ => B                          :MLOAD(batchL2DataParsed)
    A - B - C - D                   :JMPN(invalidTxRLP)

    ${getTxs(p, D)} => A
    $${p = p + D}
                                    :RETURN

;; Add bytes to generate the transaction hash: transactionHash = H_keccak(RLP(nonce, reqType, data, chainId))
addHashTx:
    $ => A                          :MLOAD(txRLPLength)
    A - HASHPOS - D                 :JMPN(invalidTxRLP)
    
; 
addHashTxBegin:
    ; Revert if all data has already been parsed
    $ => A                          :MLOAD(batchL2DataLength)
    $ => B                          :MLOAD(batchL2DataParsed)
    A - B - C - D                   :JMPN(invalidTxRLP)

    ${getTxs(p, D)} => A
    $${p = p + D}

    A                               :HASHK(E)
    C + D => C                      :RETURN

;; Check short value is over 127. Error RLP: single byte < 0x80 are not prefixed
checkShortRLP:
    D - 1                           :JMPNZ(skipCheckShort)
    A - %MIN_VALUE_SHORT            :JMPN(invalidTxRLP)

skipCheckShort:
                                    :RETURN

;; Check long list/value is over 55 bytes long. Error RLP: encoded list too short
checkLongRLP:
    A - %MIN_BYTES_LONG             :JMPN(invalidTxRLP)
                                    :RETURN

;; Check short value is over 127. Error RLP: single byte < 0x80 are not prefixed
checkShortDataRLP:
    $ => B                          :MLOAD(txCalldataLen)
    B - 1                           :JMPNZ(skipCheckShortData)
    A - %MIN_VALUE_SHORT            :JMPN(invalidTxRLP)

skipCheckShortData:
                                    :RETURN

;; Check non-negative integer RLP representation has no leading zeros and it is encoded in its shortest form
VAR GLOBAL tmpVarAcheckNonLeadingZeros
VAR GLOBAL tmpVarZkPCcheckNonLeadingZeros
checkNonLeadingZeros:
    RR                              :MSTORE(tmpVarZkPCcheckNonLeadingZeros)
    A                               :MSTORE(tmpVarAcheckNonLeadingZeros)
    ; set value to B and get its
    A => B                          :CALL(getLenBytes) ; in: [B: number] out: [A: byte length of B]
    ; check (bytes length - encoded length) are not equal
    D - A                           :JMPNZ(invalidTxRLP)
    $ => RR                         :MLOAD(tmpVarZkPCcheckNonLeadingZeros)
    $ => A                          :MLOAD(tmpVarAcheckNonLeadingZeros), RETURN
