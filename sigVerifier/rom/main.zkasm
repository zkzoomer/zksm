INCLUDE "constants.zkasm"
INCLUDE "end.zkasm"
INCLUDE "load-tx-rlp.zkasm"
INCLUDE "process-tx.zkasm"
INCLUDE "utils.zkasm"
INCLUDE "vars.zkasm"

/** Signature Verifier zkROM
*       A - Load input variables
*       B - Loop parsing RLP signatures
*       C - Loop processing signatures
*       D - Batch computations: assert signatures size, compute batchHashData
*       E - Finalize execution
*/

/**
*   Main zkROM entry point
*/
start: 
    /**
    *   A - Load input variables
    */

    ; Ensure it is the beginning of the execution
    STEP => A
    0                                   :ASSERT 

    ; Store the total length of transactions
    ${getTxsLen()}                      :MSTORE(batchL2DataLength) ; Less than 300.000 bytes. Enforced by the smart contract

    /**
    * B - Loop parsing RLP (Recursive-length prefix) signatures
    * For each signature a new zkASM memory context is created, and the signature data is parsed to 
    * extract the values which are stored in memory for later use. Signature data is also used to compute
    * the accumulated hash of the batch:
    *      - Load signature RLP data and ensure it has correct RLP encoding
    *      - If an error is found in any signature, the batch will not process any signature
    */

    ; Prepare the Keccak instance    
    E + 1 => E                          :MSTORE(lastHashKIdUsed)
    0                                   :MSTORE(batchHashPos)  ; Pointer is increased with each signature added 
    E                                   :MSTORE(batchHashDataId)

    $${var p = 0}

    ; Set flag isLoadingRLP to 1
    1                                   :MSTORE(isLoadingRLP)

    ; Execute this loop for each signature in the batch
    txLoopRLP:
        $ => A                          :MLOAD(txLoopIndex)
        A + 1 => CTX                    :MSTORE(txLoopIndex)

        ; Get the amount of total data and the amount of data parsed, respectively
        $ => A                          :MLOAD(batchL2DataLength)
        $ => C                          :MLOAD(batchL2DataParsed)
        ; End the loop if the amount of data parsed equals the total data, otherwise execute `loadTx_rlp`
        C - A                           :JMPN(loadTx_rlp, endCheckRLP)

    ; End the RLP parsing loop 
    endCheckRLP:
        ; set flag isLoadingRLP to 0
        0                               :MSTORE(isLoadingRLP)
                                        :JMP(txLoop)

    /**
    * C - Iterates again through all signatures in the batch, verifying each one of them
    */

    txLoop:
        ; The variable `pendingTxs` acts as the loop index, decrementing by 1 in each iteration
        $ => A                          :MLOAD(pendingTxs), JMP(processTx)
        ; End the loop when all signatures in the batch are already processed
        A - 1                           :MSTORE(pendingTxs), JMPN(processTxsEnd)

    ; Restart the loop after a signature has been verified
    processTxFinished:
        $${eventLog(onFinishTx)}        :JMP(txLoop)

    ; End the signature verification loop 
    processTxsEnd:
        /**
        * E - Batch asserts & computations:
        *      - assert signatures size
        *      - compute batchHashData
        */

        ; Transaction size verification
        ; Ensure bytes added to compute the `batchHashData` matches the number of bytes loaded from input
        $ => A                          :MLOAD(batchHashPos)
        $                               :MLOAD(batchL2DataLength), ASSERT

        ;; Compute the Keccak hash for the batch of signatures, `batchHashData`, ensuring integrity of the data queried from L1
        A => HASHPOS
        $ => E                          :MLOAD(batchHashDataId)

        HASHPOS                         :HASHKLEN(E)
        $ => A                          :HASHKDIGEST(E)

        A                               :MSTORE(batchHashData)

        $${eventLog(onFinishBatch)}

    /**
    * F - Finalize execution
    */

    ; Finalize execution by jumping to the final wait
    finalizeExecution:
                                    :JMP(finalWait)
