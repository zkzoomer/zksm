include "arith.pil";
include "binary.pil";
include "config.pil";
include "global.pil";
include "padding_kk.pil";
include "rom.pil";

namespace Main(%N);

    /**
    *
    * Polynomial definitions
    *
    */

    ////////// State Polynomials

    // A Register
    pol commit A7, A6, A5, A4, A3, A2, A1;
    pol commit A0;

    // B Register
    pol commit B7, B6, B5, B4, B3, B2, B1;
    pol commit B0;

    // C Register
    pol commit C7, C6, C5, C4, C3, C2, C1;
    pol commit C0;

    // D Register
    pol commit D7, D6, D5, D4, D3, D2, D1;
    pol commit D0;

    // E Register
    pol commit E7, E6, E5, E4, E3, E2, E1;
    pol commit E0;

    // State root
    pol commit SR7, SR6, SR5, SR4, SR3, SR2, SR1;
    pol commit SR0;

    pol commit zkPC;                   // Program counter for the zkEVM -- which instruction is being ran in the ROM
    pol commit RR;                     // Micro code return address (subroutines)
    pol commit HASHPOS;                // Bytes position for hashing
    pol commit RCX;

    // STEP: how many instructions have we executed in the zkROM
    // ROTL_C: C register but rotated

    //////////  Instruction related polynomials
    pol commit CONST7, CONST6, CONST5, CONST4, CONST3, CONST2, CONST1, CONST0;
    pol commit FREE7, FREE6, FREE5, FREE4, FREE3, FREE2, FREE1, FREE0;
    pol commit inA, inB, inC, inROTL_C, inD, inE, inSR, inFREE, inSTEP, inHASHPOS, inRCX;
    pol commit setA, setB, setC, setD, setE, setSR, setHASHPOS, setRCX;
    pol commit JMP, JMPN, JMPC, JMPZ, offset;
    pol commit carry;

    ////////// operations
    pol commit arithEq0, arithEq1, arithEq2;
    pol commit hashK, hashK1, hashKLen, hashKDigest;
    pol commit bin;
    pol commit binOpcode;
    pol commit assert;
    pol commit repeat, call, return;

    ////////// Intermediary commit polynomials
    pol commit isNeg;

    ////////// Counters
    pol commit cntArith, cntBinary, cntKeccakF;
    pol commit inCntArith, inCntBinary, inCntKeccakF;
    pol commit incCounter;

    /**
    *
    * Intermediary calculations and checks
    *
    */

    ////////// Selectors `op`
    pol op1 = A1 * inA + B1 * inB + C1 * inC + C0 * inROTL_C + D1 * inD + E1 * inE + SR1 * inSR + FREE1 * inFREE + CONST1;

    pol op2 = A2 * inA + B2 * inB + C2 * inC + C1 * inROTL_C + D2 * inD + E2 * inE + SR2 * inSR + FREE2 * inFREE + CONST2;

    pol op3 = A3 * inA + B3 * inB + C3 * inC + C2 * inROTL_C + D3 * inD + E3 * inE + SR3 * inSR + FREE3 * inFREE + CONST3;

    pol op4 = A4 * inA + B4 * inB + C4 * inC + C3 * inROTL_C + D4 * inD + E4 * inE + SR4 * inSR + FREE4 * inFREE + CONST4;

    pol op5 = A5 * inA + B5 * inB + C5 * inC + C4 * inROTL_C + D5 * inD + E5 * inE + SR5 * inSR + FREE5 * inFREE + CONST5;

    pol op6 = A6 * inA + B6 * inB + C6 * inC + C5 * inROTL_C + D6 * inD + E6 * inE + SR6 * inSR + FREE6 * inFREE + CONST6;

    pol op7 = A7 * inA + B7 * inB + C7 * inC + C6 * inROTL_C + D7 * inD + E7 * inE + SR7 * inSR + FREE7 * inFREE + CONST7;

    pol op0 = A0 * inA + B0 * inB + C0 * inC + C7 * inROTL_C + D0 * inD + E0 * inE + SR0 * inSR + FREE0 * inFREE + CONST0 +
        Global.STEP * inSTEP +
        HASHPOS * inHASHPOS +
        cntArith * inCntArith +
        cntBinary * inCntBinary +
        cntKeccakF * inCntKeccakF +
        RCX * inRCX;

    pol addr = offset;

    /////// `isNeg`

    pol commit lJmpnCondValue;
    pol jmpnCondValue = JMPN * (isNeg * 2**32 + op0);
    isNeg * (1 - isNeg) = 0;

    lJmpnCondValue in Global.STEP;

    pol commit hJmpnCondValueBit[9];

    hJmpnCondValueBit[8] * (1 - hJmpnCondValueBit[8]) = 0;
    hJmpnCondValueBit[7] * (1 - hJmpnCondValueBit[7]) = 0;
    hJmpnCondValueBit[6] * (1 - hJmpnCondValueBit[6]) = 0;
    hJmpnCondValueBit[5] * (1 - hJmpnCondValueBit[5]) = 0;
    hJmpnCondValueBit[4] * (1 - hJmpnCondValueBit[4]) = 0;
    hJmpnCondValueBit[3] * (1 - hJmpnCondValueBit[3]) = 0;
    hJmpnCondValueBit[2] * (1 - hJmpnCondValueBit[2]) = 0;
    hJmpnCondValueBit[1] * (1 - hJmpnCondValueBit[1]) = 0;
    hJmpnCondValueBit[0] * (1 - hJmpnCondValueBit[0]) = 0;

    jmpnCondValue = 2**31 * hJmpnCondValueBit[8] + 2**30 * hJmpnCondValueBit[7] + 2**29 * hJmpnCondValueBit[6] + 2**28 * hJmpnCondValueBit[5] +
                    2**27 * hJmpnCondValueBit[4] + 2**26 * hJmpnCondValueBit[3] + 2**25 * hJmpnCondValueBit[2] + 2**24 * hJmpnCondValueBit[1] +
                    2**23 * hJmpnCondValueBit[0] + lJmpnCondValue;

    /////// `RCX` zero check
    pol commit RCXInv;
    pol RCXIsZero = 1 - RCX*RCXInv;
    RCXIsZero*RCX = 0;

    /////// `op0` zero check
    pol commit op0Inv;
    pol op0IsZero = 1 - op0 * op0Inv;
    op0IsZero*op0 = 0;

    /**
    *
    * Compute the new state
    *
    */

    A0' = setA * (op0 - A0) + A0;
    A1' = setA * (op1 - A1) + A1;
    A2' = setA * (op2 - A2) + A2;
    A3' = setA * (op3 - A3) + A3;
    A4' = setA * (op4 - A4) + A4;
    A5' = setA * (op5 - A5) + A5;
    A6' = setA * (op6 - A6) + A6;
    A7' = setA * (op7 - A7) + A7;

    B0' = setB * (op0 - B0) + B0;
    B1' = setB * (op1 - B1) + B1;
    B2' = setB * (op2 - B2) + B2;
    B3' = setB * (op3 - B3) + B3;
    B4' = setB * (op4 - B4) + B4;
    B5' = setB * (op5 - B5) + B5;
    B6' = setB * (op6 - B6) + B6;
    B7' = setB * (op7 - B7) + B7;

    C0' = setC * (op0 - C0) + C0;
    C1' = setC * (op1 - C1) + C1;
    C2' = setC * (op2 - C2) + C2;
    C3' = setC * (op3 - C3) + C3;
    C4' = setC * (op4 - C4) + C4;
    C5' = setC * (op5 - C5) + C5;
    C6' = setC * (op6 - C6) + C6;
    C7' = setC * (op7 - C7) + C7;

    D0' = setD * (op0 - D0) + D0;
    D1' = setD * (op1 - D1) + D1;
    D2' = setD * (op2 - D2) + D2;
    D3' = setD * (op3 - D3) + D3;
    D4' = setD * (op4 - D4) + D4;
    D5' = setD * (op5 - D5) + D5;
    D6' = setD * (op6 - D6) + D6;
    D7' = setD * (op7 - D7) + D7;

    E0' = setE * (op0 - E0) + E0;
    E1' = setE * (op1 - E1) + E1;
    E2' = setE * (op2 - E2) + E2;
    E3' = setE * (op3 - E3) + E3;
    E4' = setE * (op4 - E4) + E4;
    E5' = setE * (op5 - E5) + E5;
    E6' = setE * (op6 - E6) + E6;
    E7' = setE * (op7 - E7) + E7;

    SR0' = setSR * (op0 - SR0) + SR0;
    SR1' = setSR * (op1 - SR1) + SR1;
    SR2' = setSR * (op2 - SR2) + SR2;
    SR3' = setSR * (op3 - SR3) + SR3;
    SR4' = setSR * (op4 - SR4) + SR4;
    SR5' = setSR * (op5 - SR5) + SR5;
    SR6' = setSR * (op6 - SR6) + SR6;
    SR7' = setSR * (op7 - SR7) + SR7;

    pol decRCX = repeat * (1 - RCXIsZero);
    RCX' = setRCX * (op0 - (RCX - decRCX)) + (RCX - decRCX);

    HASHPOS' = setHASHPOS * (op0 - HASHPOS) + HASHPOS + hashK * D0 + hashK1;

    pol doJMP = JMPN * isNeg + JMP + JMPC * carry + JMPZ * op0IsZero + return + call;
    pol elseJMP = JMPN * (1 - isNeg) + JMPC * (1 - carry) + JMPZ * (1 - op0IsZero);

    pol commit jmpAddr;
    pol commit elseAddr;
    pol commit useJmpAddr;
    pol commit useElseAddr;

    /////// ROM/Zkasm constraint: useJmpAddr * return = 0
    pol finalJmpAddr = useJmpAddr * (jmpAddr - addr) - return * addr + addr;
    pol nextNoJmpZkPC = zkPC + 1 - ((1 - RCXIsZero) * repeat);
    pol finalElseAddr = useElseAddr * (elseAddr - nextNoJmpZkPC) + nextNoJmpZkPC;

    /////// if elseAddr wasn't specified on zkasm, compiler put current address + 1
    zkPC' = doJMP * (finalJmpAddr - nextNoJmpZkPC) + elseJMP * (finalElseAddr - nextNoJmpZkPC) + nextNoJmpZkPC;

    zkPC * Global.L1 = 0;

    (A0 - op0) * assert = 0;
    (A1 - op1) * assert = 0;
    (A2 - op2) * assert = 0;
    (A3 - op3) * assert = 0;
    (A4 - op4) * assert = 0;
    (A5 - op5) * assert = 0;
    (A6 - op6) * assert = 0;
    (A7 - op7) * assert = 0;

    /**
    *
    * ROM Plookpups
    *
    * Code generated with:
    * node tools/pil_pol_table/bits_compose.js "arithEq0,arithEq1,arithEq2,assert,bin,hashK,hashKDigest,hashKLen,JMP,JMPC,JMPN,repeat,setA,setB,setC,setD,setE,setHASHPOS,setRCX,setSR,useJmpAddr,JMPZ,call,return,hashK1,useElseAddr" -b
    * inside https://github.com/0xPolygonHermez/zkevm-proverjs
    *
    */

    pol operations =
        2**0    * arithEq0      + 2**1  * arithEq1      + 2**2  * arithEq2      + 2**3  * assert
        + 2**4  * bin           + 2**5  * hashK         + 2**6  * hashKDigest   + 2**7  * hashKLen
        + 2**8  * JMP           + 2**9  * JMPC          + 2**10 * JMPN          + 2**11 * repeat
        + 2**12 * setA          + 2**13 * setB          + 2**14 * setC          + 2**15 * setD
        + 2**16 * setE          + 2**17 * setHASHPOS    + 2**18 * setRCX        + 2**19 * setSR
        + 2**20 * useJmpAddr    + 2**21 * JMPZ          + 2**22 * call          + 2**23 * return
        + 2**24 * hashK1        + 2**25 * useElseAddr;

    (1 - arithEq0) * arithEq0 = 0;
    (1 - arithEq1) * arithEq1 = 0;
    (1 - arithEq2) * arithEq2 = 0;
    (1 - assert) * assert = 0;
    (1 - bin) * bin = 0;
    (1 - hashK) * hashK = 0;
    (1 - hashKDigest) * hashKDigest = 0;
    (1 - hashKLen) * hashKLen = 0;
    (1 - JMP) * JMP = 0;
    (1 - JMPC) * JMPC = 0;
    (1 - JMPN) * JMPN = 0;
    (1 - repeat) * repeat = 0;
    (1 - setA) * setA = 0;
    (1 - setB) * setB = 0;
    (1 - setC) * setC = 0;
    (1 - setD) * setD = 0;
    (1 - setE) * setE = 0;
    (1 - setHASHPOS) * setHASHPOS = 0;
    (1 - setRCX) * setRCX = 0;
    (1 - setSR) * setSR = 0;
    (1 - useJmpAddr) * useJmpAddr = 0;
    (1 - JMPZ) * JMPZ = 0;
    (1 - call) * call = 0;
    (1 - return) * return = 0;
    (1 - hashK1) * hashK1 = 0;
    (1 - useElseAddr) * useElseAddr = 0;

    {
        CONST0, CONST1, CONST2, CONST3, CONST4, CONST5, CONST6, CONST7,
        inA, inB, inC, inROTL_C, inD, inE, inSR, inFREE,
        inHASHPOS, inSTEP, inRCX,
        inCntArith, inCntBinary, inCntKeccakF,
        operations, offset, binOpcode, jmpAddr, elseAddr, zkPC
    } in {
        Rom.CONST0, Rom.CONST1, Rom.CONST2, Rom.CONST3, Rom.CONST4, Rom.CONST5, Rom.CONST6, Rom.CONST7,
        Rom.inA, Rom.inB, Rom.inC, Rom.inROTL_C, Rom.inD, Rom.inE, Rom.inSR, Rom.inFREE,
        Rom.inHASHPOS, Rom.inSTEP, Rom.inRCX,
        Rom.inCntArith, Rom.inCntBinary, Rom.inCntKeccakF,
        Rom.operations, Rom.offset, Rom.binOpcode, Rom.jmpAddr, Rom.elseAddr, Rom.line
    };

    /**
    *
    * Arithmetic Plookpups
    *
    */

    pol ax1_0 =  Arith.x1[0] +  Arith.x1[1] * 2**16;
    pol ax1_1 =  Arith.x1[2] +  Arith.x1[3] * 2**16;
    pol ax1_2 =  Arith.x1[4] +  Arith.x1[5] * 2**16;
    pol ax1_3 =  Arith.x1[6] +  Arith.x1[7] * 2**16;
    pol ax1_4 =  Arith.x1[8] +  Arith.x1[9] * 2**16;
    pol ax1_5 = Arith.x1[10] + Arith.x1[11] * 2**16;
    pol ax1_6 = Arith.x1[12] + Arith.x1[13] * 2**16;
    pol ax1_7 = Arith.x1[14] + Arith.x1[15] * 2**16;

    pol ay1_0 =  Arith.y1[0] +  Arith.y1[1] * 2**16;
    pol ay1_1 =  Arith.y1[2] +  Arith.y1[3] * 2**16;
    pol ay1_2 =  Arith.y1[4] +  Arith.y1[5] * 2**16;
    pol ay1_3 =  Arith.y1[6] +  Arith.y1[7] * 2**16;
    pol ay1_4 =  Arith.y1[8] +  Arith.y1[9] * 2**16;
    pol ay1_5 = Arith.y1[10] + Arith.y1[11] * 2**16;
    pol ay1_6 = Arith.y1[12] + Arith.y1[13] * 2**16;
    pol ay1_7 = Arith.y1[14] + Arith.y1[15] * 2**16;

    pol ax2_0 =  Arith.x2[0] +  Arith.x2[1] * 2**16;
    pol ax2_1 =  Arith.x2[2] +  Arith.x2[3] * 2**16;
    pol ax2_2 =  Arith.x2[4] +  Arith.x2[5] * 2**16;
    pol ax2_3 =  Arith.x2[6] +  Arith.x2[7] * 2**16;
    pol ax2_4 =  Arith.x2[8] +  Arith.x2[9] * 2**16;
    pol ax2_5 = Arith.x2[10] + Arith.x2[11] * 2**16;
    pol ax2_6 = Arith.x2[12] + Arith.x2[13] * 2**16;
    pol ax2_7 = Arith.x2[14] + Arith.x2[15] * 2**16;

    pol ay2_0 =  Arith.y2[0] +  Arith.y2[1] * 2**16;
    pol ay2_1 =  Arith.y2[2] +  Arith.y2[3] * 2**16;
    pol ay2_2 =  Arith.y2[4] +  Arith.y2[5] * 2**16;
    pol ay2_3 =  Arith.y2[6] +  Arith.y2[7] * 2**16;
    pol ay2_4 =  Arith.y2[8] +  Arith.y2[9] * 2**16;
    pol ay2_5 = Arith.y2[10] + Arith.y2[11] * 2**16;
    pol ay2_6 = Arith.y2[12] + Arith.y2[13] * 2**16;
    pol ay2_7 = Arith.y2[14] + Arith.y2[15] * 2**16;

    pol ax3_0 =  Arith.x3[0] +  Arith.x3[1] * 2**16;
    pol ax3_1 =  Arith.x3[2] +  Arith.x3[3] * 2**16;
    pol ax3_2 =  Arith.x3[4] +  Arith.x3[5] * 2**16;
    pol ax3_3 =  Arith.x3[6] +  Arith.x3[7] * 2**16;
    pol ax3_4 =  Arith.x3[8] +  Arith.x3[9] * 2**16;
    pol ax3_5 = Arith.x3[10] + Arith.x3[11] * 2**16;
    pol ax3_6 = Arith.x3[12] + Arith.x3[13] * 2**16;
    pol ax3_7 = Arith.x3[14] + Arith.x3[15] * 2**16;

    pol ay3_0 =  Arith.y3[0] +  Arith.y3[1] * 2**16;
    pol ay3_1 =  Arith.y3[2] +  Arith.y3[3] * 2**16;
    pol ay3_2 =  Arith.y3[4] +  Arith.y3[5] * 2**16;
    pol ay3_3 =  Arith.y3[6] +  Arith.y3[7] * 2**16;
    pol ay3_4 =  Arith.y3[8] +  Arith.y3[9] * 2**16;
    pol ay3_5 = Arith.y3[10] + Arith.y3[11] * 2**16;
    pol ay3_6 = Arith.y3[12] + Arith.y3[13] * 2**16;
    pol ay3_7 = Arith.y3[14] + Arith.y3[15] * 2**16;

    arithEq0 {  1, 0, 0, 0,
        A0, A1, A2, A3, A4, A5, A6, A7,
        B0, B1, B2, B3, B4, B5, B6, B7,
        C0, C1, C2, C3, C4, C5, C6, C7,
        D0, D1, D2, D3, D4, D5, D6, D7,
        op0, op1, op2, op3, op4, op5, op6, op7 } is
    Arith.resultEq0 {
        Arith.selEq[0], Arith.selEq[1], Arith.selEq[2], Arith.selEq[3],
        ax1_0, ax1_1, ax1_2, ax1_3, ax1_4, ax1_5, ax1_6, ax1_7,
        ay1_0, ay1_1, ay1_2, ay1_3, ay1_4, ay1_5, ay1_6, ay1_7,
        ax2_0, ax2_1, ax2_2, ax2_3, ax2_4, ax2_5, ax2_6, ax2_7,
        ay2_0, ay2_1, ay2_2, ay2_3, ay2_4, ay2_5, ay2_6, ay2_7,
        ay3_0, ay3_1, ay3_2, ay3_3, ay3_4, ay3_5, ay3_6, ay3_7
    };

    arithEq1 { 
        0, 1, 0, 1,
        A0, A1, A2, A3, A4, A5, A6, A7,
        B0, B1, B2, B3, B4, B5, B6, B7,
        C0, C1, C2, C3, C4, C5, C6, C7,
        D0, D1, D2, D3, D4, D5, D6, D7,
        E0, E1, E2, E3, E4, E5, E6, E7,
        op0, op1, op2, op3, op4, op5, op6, op7 
    } is
    Arith.resultEq1 {
        Arith.selEq[0], Arith.selEq[1], Arith.selEq[2], Arith.selEq[3],
        ax1_0, ax1_1, ax1_2, ax1_3, ax1_4, ax1_5, ax1_6, ax1_7,
        ay1_0, ay1_1, ay1_2, ay1_3, ay1_4, ay1_5, ay1_6, ay1_7,
        ax2_0, ax2_1, ax2_2, ax2_3, ax2_4, ax2_5, ax2_6, ax2_7,
        ay2_0, ay2_1, ay2_2, ay2_3, ay2_4, ay2_5, ay2_6, ay2_7,
        ax3_0, ax3_1, ax3_2, ax3_3, ax3_4, ax3_5, ax3_6, ax3_7,
        ay3_0, ay3_1, ay3_2, ay3_3, ay3_4, ay3_5, ay3_6, ay3_7
    };

    arithEq2 {  
        0, 0, 1, 1,
        A0, A1, A2, A3, A4, A5, A6, A7,
        B0, B1, B2, B3, B4, B5, B6, B7,
        A0, A1, A2, A3, A4, A5, A6, A7,
        B0, B1, B2, B3, B4, B5, B6, B7,
        E0, E1, E2, E3, E4, E5, E6, E7,
        op0, op1, op2, op3, op4, op5, op6, op7 
    } is
    Arith.resultEq2 {
        Arith.selEq[0], Arith.selEq[1], Arith.selEq[2], Arith.selEq[3],
        ax1_0, ax1_1, ax1_2, ax1_3, ax1_4, ax1_5, ax1_6, ax1_7,
        ay1_0, ay1_1, ay1_2, ay1_3, ay1_4, ay1_5, ay1_6, ay1_7,
        ax2_0, ax2_1, ax2_2, ax2_3, ax2_4, ax2_5, ax2_6, ax2_7,
        ay2_0, ay2_1, ay2_2, ay2_3, ay2_4, ay2_5, ay2_6, ay2_7,
        ax3_0, ax3_1, ax3_2, ax3_3, ax3_4, ax3_5, ax3_6, ax3_7,
        ay3_0, ay3_1, ay3_2, ay3_3, ay3_4, ay3_5, ay3_6, ay3_7
    };

    cntArith' = cntArith * (1 - Global.L1) + arithEq0 + arithEq1 + arithEq2;

    /**
    *
    * Binary Plookpups
    *
    */

    bin {
        binOpcode,
        A0, A1, A2, A3, A4, A5, A6, A7,
        B0, B1, B2, B3, B4, B5, B6, B7,
        op0, op1, op2, op3, op4, op5, op6, op7,
        carry
    } is
    Binary.resultBinOp {
        Binary.lOpcode,
        Binary.a[0], Binary.a[1], Binary.a[2], Binary.a[3], Binary.a[4], Binary.a[5], Binary.a[6], Binary.a[7],
        Binary.b[0], Binary.b[1], Binary.b[2], Binary.b[3], Binary.b[4], Binary.b[5], Binary.b[6], Binary.b[7],
        Binary.c[0], Binary.c[1], Binary.c[2], Binary.c[3], Binary.c[4], Binary.c[5], Binary.c[6], Binary.c[7],
        Binary.lCout
    };

    cntBinary' = cntBinary * (1 - Global.L1) + bin;

    /**
    *
    * Keccak hash Plookpups
    *
    */

    hashK + hashK1 {
        addr,
        HASHPOS,
        D0 * hashK + hashK1,
        op0, op1, op2, op3,
        op4, op5, op6, op7
    } in
    PaddingKK.crLatch * PaddingKK.r8valid {
        PaddingKK.addr,
        PaddingKK.len - PaddingKK.rem - PaddingKK.crLen + 1,
        PaddingKK.crLen,
        PaddingKK.crV0C, PaddingKK.crV1C, PaddingKK.crV2C, PaddingKK.crV3C,
        PaddingKK.crV4C, PaddingKK.crV5C, PaddingKK.crV6C, PaddingKK.crV7C
    };

    hashKLen {
        addr,
        op0
    } is
    PaddingKK.lastHashLen {
        PaddingKK.addr,
        PaddingKK.len
    };

    hashKDigest {
        addr,
        op0, op1, op2, op3,
        op4, op5, op6, op7,
        incCounter
    } is
    PaddingKK.lastHashDigest {
        PaddingKK.addr,
        PaddingKK.hash0, PaddingKK.hash1, PaddingKK.hash2, PaddingKK.hash3,
        PaddingKK.hash4, PaddingKK.hash5, PaddingKK.hash6, PaddingKK.hash7,
        PaddingKK.incCounter
    };

    cntKeccakF' = cntKeccakF * (1 - Global.L1) + incCounter*hashKDigest;
